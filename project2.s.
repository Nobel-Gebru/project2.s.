.data
	LongMessage: .asciiz "Input is too long."# print too long
	invalidRange: .asciiz "Invalid base-34 number."# print invalid number
	emptyInput: .asciiz "Input is empty."# print input is empty
	spaceString: .space 10000# allocate memory to string

.text

main:
	li $v0, 8  # assign a user input
	la $a0, spaceString
	li $a1, 10000
	syscall
	add $t1, $0, 0 
	add $t3, $0, 0 
	add $t7, $0, 2

	la $t0, spaceString	
	lb $t1,0($t0) 
	
	beq $t1, 10, Empty_Error # check if the input is 10
	beq $t1, 0, Empty_Error	# branch if the input is 0 
	addi $s0, $0, 34
	addi $t4, $0, 1 	
	addi $t5, $0, 0 	
	
	jump_spaces:
	lb $t1,0($t0) #sends register t1 value to t0
	addi $t0, $t0, 1
	addi $t3, $t3, 1
	beq $t1, 32, jump_spaces # if the value of t1 is 32 call jump_spaces
	beq $t1, $0, emptyInput_Error

	displayChar:
	lb $t1,0($t0)
	addi $t0, $t0, 1
	addi $t3, $t3, 1
	beq $t1, 10, restart_program
	beq $t1, 0, restart_program
	bne $t1, 32, displayChar
	
	spaces_or_chars:
	lb $t1,0($t0)
	addi $t0, $t0, 1
	addi $t3, $t3, 1
	beq $t1, 10, restart_program
	beq $t1, 0, restart_program
	bne $t1, 32, Invalid_Range_Error
	j spaces_or_chars

restart_program:
	sub $t0, $t0, $t3 	
	la $t3, 0 			#restaring the counter

go_foward:
	lb $t1,0($t0)
